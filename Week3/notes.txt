middle wares --> precheck (authentication, input validation) before actual logic 

Task 1 --> before making a request to a endpoint take kidney id in query paramter and user name pass in header
ways to pass data --> body, query param , header 

dumb way --> get route k andr hi username and pass ka likh lo authentication

good way --> middleware --> get route k parameter --> callback functions ( first , second , last)
last is generally logic , first and second is generally middleware eg case --> authentication for username and password
and last is queryparamter check for middleware --> sbse phle auth ka dekho woh shi toh dusra paramter ka check
so 2 middleware ==> switch to next route is next() functions
function userMiddlware((req, res, next)=>{
    do check 
    if all good then called next()
    otherwise dont do anything 
})
app.get('health-checkup',userMiddlware, paramMiddleware , (req, res)=>{ actual logic })

app.use(middleware) --> takes middleware into input means this can be called for every route weitten below so use it 
app.use(express.json()) --> by this we can use req.body directly in the code beacuse now this middlware is included in all routes and whole code

- **`app.use()`** This method is used to **mount middlewares globally** in the application. They are **executed for every incoming request**. Examples include:
    1. **`app.use(calculateRequests)` :** An example middleware that performs some calculations or operations for each request.
    2. **`app.use(express.json());` :** middleware to parse the body of the request.

    at last  ---> app.use(function (err,req, res, next){
     res.send('Wrong with the server')
    })


authentication is done can be done with help of middlware --> api handle rate limiting 
Input authentication is also a thing --> 


authentication: 





middleware --> express is series of  bunch of middleware calculations
they have access of req, res, next 
--> make changes in request , response
--> calls the next middlware 
--> execute some code